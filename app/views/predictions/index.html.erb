<div class="predictions-page">
  <div class="page-header">
    <div class="header-content">
      <h1>üîÆ Predicciones Activas</h1>
      <p class="subtitle">Vota y gana puntos en las predicciones de la comunidad</p>
    </div>
  </div>

  <!-- Categories Filter -->
  <div class="categories-filter">
    <div class="filter-header">
      <h3>üìÇ Categor√≠as</h3>
    </div>
    <div class="categories-grid">
      <%= link_to "üè† Todas", predictions_path, class: "category-chip #{'active' unless params[:category_id]}" %>
      <% @categories.each do |category| %>
        <%= link_to category.display_name, predictions_path(category_id: category.id), 
            class: "category-chip #{'active' if params[:category_id]&.to_i == category.id}",
            style: "border-color: #{category.color}; color: #{category.color};" %>
      <% end %>
    </div>
  </div>

  <% if @predictions.any? %>
    <div class="predictions-grid">
      <% @predictions.each do |prediction| %>
        <div class="prediction-card">
          <div class="prediction-header">
            <h3><%= link_to prediction.title, prediction_path(prediction) %></h3>
            <div class="author-info">
              <span class="author-label">por</span>
              <%= link_to prediction.user.username, profile_path(prediction.user), class: "author-link" %>
              <span class="user-title"><%= prediction.user.title %></span>
              <% if prediction.category %>
                <span class="category-badge" style="background-color: <%= prediction.category.color %>20; color: <%= prediction.category.color %>; border-color: <%= prediction.category.color %>;">
                  <%= prediction.category.icon %> <%= prediction.category.name %>
                </span>
              <% end %>
            </div>
          </div>
          
          <div class="prediction-content">
            <p><%= truncate(prediction.question, length: 150) %></p>
          </div>
          
          <div class="prediction-stats">
            <div class="vote-percentages">
              <div class="vote-bar">
                <div class="yes-bar" style="width: <%= prediction.yes_percentage %>%">
                  <span>S√ç: <%= prediction.yes_percentage %>%</span>
                </div>
                <div class="no-bar" style="width: <%= prediction.no_percentage %>%">
                  <span>NO: <%= prediction.no_percentage %>%</span>
                </div>
              </div>
            </div>
            
            <div class="prediction-meta">
              <div class="meta-item">
                <span class="meta-icon">üó≥Ô∏è</span>
                <span class="meta-value"><%= prediction.total_votes %> votos</span>
              </div>
              <div class="meta-item">
                <span class="meta-icon">üí∞</span>
                <span class="meta-value"><%= prediction.total_points %> pts</span>
              </div>
              <% if prediction.resolved? %>
                <div class="meta-item">
                  <span class="outcome <%= prediction.outcome ? 'correct' : 'incorrect' %>">
                    <%= prediction.outcome ? '‚úÖ S√ç' : '‚ùå NO' %>
                  </span>
                </div>
              <% else %>
                <div class="meta-item">
                  <span class="meta-icon">‚è∞</span>
                  <span class="meta-value">Resuelve: <%= prediction.resolution_date.strftime("%d/%m/%Y") %></span>
                </div>
              <% end %>
            </div>
          </div>
          
          <% if logged_in? && prediction.can_be_voted_on? %>
            <div class="vote-actions">
              <%= link_to "Votar", prediction_path(prediction), class: "btn btn-primary" %>
            </div>
          <% end %>
        </div>
      <% end %>
    </div>
  <% else %>
    <div class="empty-state">
      <div class="empty-icon">üîÆ</div>
      <h2>No hay predicciones activas</h2>
      <p>¬°S√© el primero en crear una predicci√≥n!</p>
      <% if logged_in? %>
        <%= link_to "Crear Predicci√≥n", new_prediction_path, class: "btn btn-primary" %>
      <% else %>
        <div class="auth-actions">
          <%= link_to "Reg√≠strate", signup_path, class: "btn btn-primary" %>
          <span class="or-divider">o</span>
          <%= link_to "Inicia Sesi√≥n", login_path, class: "btn btn-secondary" %>
        </div>
      <% end %>
    </div>
  <% end %>
</div>

<style>
  .predictions-page {
    max-width: 100%;
  }
  
  .page-header {
    text-align: center;
    margin-bottom: 3rem;
    padding: 2rem;
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    border-radius: var(--radius-xl);
    color: white;
    position: relative;
    overflow: hidden;
  }
  
  .page-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="50" cy="10" r="0.5" fill="white" opacity="0.1"/><circle cx="10" cy="60" r="0.5" fill="white" opacity="0.1"/><circle cx="90" cy="40" r="0.5" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.3;
  }
  
  .header-content {
    position: relative;
    z-index: 1;
  }
  
  .page-header h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    text-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }
  
  .subtitle {
    font-size: 1.1rem;
    opacity: 0.9;
    font-weight: 400;
  }
  
  .predictions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    gap: 2rem;
  }
  
  .prediction-card {
    background: var(--bg-primary);
    border-radius: var(--radius-xl);
    padding: 2rem;
    box-shadow: var(--shadow-lg);
    border: 1px solid var(--border-color);
    transition: var(--transition);
    position: relative;
    overflow: hidden;
  }
  
  .prediction-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
  }
  
  .prediction-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-xl);
  }
  
  .prediction-header {
    margin-bottom: 1.5rem;
  }
  
  .prediction-header h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.75rem;
    line-height: 1.4;
  }
  
  .prediction-header h3 a {
    color: var(--text-primary);
    text-decoration: none;
    transition: var(--transition);
  }
  
  .prediction-header h3 a:hover {
    color: var(--primary-color);
  }
  
  .author-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--text-secondary);
  }
  
  .author-label {
    color: var(--text-muted);
  }
  
  .author-link {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 500;
    transition: var(--transition);
  }
  
  .author-link:hover {
    text-decoration: underline;
  }
  
  .user-title {
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: var(--radius-lg);
    font-size: 0.75rem;
    font-weight: 600;
  }
  
  .prediction-content {
    margin-bottom: 1.5rem;
  }
  
  .prediction-content p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
  }
  
  .prediction-stats {
    margin-bottom: 1.5rem;
  }
  
  .vote-percentages {
    margin-bottom: 1rem;
  }
  
  .vote-bar {
    display: flex;
    height: 2.5rem;
    border-radius: var(--radius-lg);
    overflow: hidden;
    border: 2px solid var(--border-color);
    box-shadow: var(--shadow-sm);
  }
  
  .yes-bar {
    background: linear-gradient(135deg, var(--success-color) 0%, #059669 100%);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    font-weight: 600;
    min-width: 60px;
    transition: var(--transition);
  }
  
  .no-bar {
    background: linear-gradient(135deg, var(--danger-color) 0%, #dc2626 100%);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    font-weight: 600;
    min-width: 60px;
    transition: var(--transition);
  }
  
  .prediction-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--text-secondary);
  }
  
  .meta-icon {
    font-size: 1rem;
  }
  
  .meta-value {
    font-weight: 500;
  }
  
  .outcome {
    font-weight: 600;
    padding: 0.25rem 0.75rem;
    border-radius: var(--radius-md);
    font-size: 0.875rem;
  }
  
  .outcome.correct {
    background: linear-gradient(135deg, var(--success-color) 0%, #059669 100%);
    color: white;
  }
  
  .outcome.incorrect {
    background: linear-gradient(135deg, var(--danger-color) 0%, #dc2626 100%);
    color: white;
  }
  
  .vote-actions {
    text-align: center;
  }
  
  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    background: var(--bg-primary);
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-lg);
    border: 2px dashed var(--border-color);
  }
  
  .empty-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }
  
  .empty-state h2 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
  }
  
  .empty-state p {
    color: var(--text-secondary);
    margin-bottom: 2rem;
    font-size: 1.1rem;
  }
  
  .auth-actions {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
  }
  
  .or-divider {
    color: var(--text-muted);
    font-weight: 500;
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .predictions-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    
    .prediction-card {
      padding: 1.5rem;
    }
    
    .page-header h1 {
      font-size: 2rem;
    }
    
    .prediction-meta {
      flex-direction: column;
      gap: 0.75rem;
    }
    
    .auth-actions {
      flex-direction: column;
      gap: 1rem;
    }
    
    .or-divider {
      display: none;
    }
  }
  
  /* Animations */
  .prediction-card {
    animation: fadeInUp 0.6s ease-out;
  }
  
  .prediction-card:nth-child(1) { animation-delay: 0.1s; }
  .prediction-card:nth-child(2) { animation-delay: 0.2s; }
  .prediction-card:nth-child(3) { animation-delay: 0.3s; }
  .prediction-card:nth-child(4) { animation-delay: 0.4s; }
  .prediction-card:nth-child(5) { animation-delay: 0.5s; }
  .prediction-card:nth-child(6) { animation-delay: 0.6s; }
  
  /* Categories Filter Styles */
  .categories-filter {
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: var(--bg-primary);
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-md);
    border: 1px solid var(--border-color);
  }
  
  .filter-header h3 {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }
  
  .categories-grid {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
  }
  
  .category-chip {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    border: 2px solid var(--border-color);
    border-radius: var(--radius-lg);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: var(--transition);
    background: var(--bg-primary);
  }
  
  .category-chip:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }
  
  .category-chip.active {
    background: var(--primary-color);
    color: white !important;
    border-color: var(--primary-color);
  }
  
  .category-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.75rem;
    border: 1px solid;
    border-radius: var(--radius-md);
    font-size: 0.75rem;
    font-weight: 500;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('prediction-form');
    const predictionsList = document.getElementById('predictions-list');
    
    // Cargar predicciones al iniciar
    loadPredictions();
    
    // Manejar env√≠o del formulario
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const content = formData.get('prediction[content]');
      const date = formData.get('prediction[date]');
      
      if (content && date) {
        savePrediction(content, date);
        form.reset();
        loadPredictions();
      }
    });
    
    function savePrediction(content, date) {
      const predictions = getPredictions();
      const newPrediction = {
        id: Date.now(),
        content: content,
        date: date,
        createdAt: new Date().toISOString()
      };
      
      predictions.push(newPrediction);
      localStorage.setItem('predictions', JSON.stringify(predictions));
    }
    
    function getPredictions() {
      const stored = localStorage.getItem('predictions');
      return stored ? JSON.parse(stored) : [];
    }
    
    function loadPredictions() {
      const predictions = getPredictions();
      predictionsList.innerHTML = '';
      
      if (predictions.length === 0) {
        predictionsList.innerHTML = '<p style="text-align: center; color: #666;">No hay predicciones guardadas.</p>';
        return;
      }
      
      // Ordenar por fecha (m√°s recientes primero)
      predictions.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      
      predictions.forEach(prediction => {
        const predictionElement = createPredictionElement(prediction);
        predictionsList.appendChild(predictionElement);
      });
    }
    
    function createPredictionElement(prediction) {
      const div = document.createElement('div');
      div.className = 'prediction-item';
      
      const today = new Date();
      const targetDate = new Date(prediction.date);
      const isExpired = targetDate < today;
      
      const statusText = isExpired ? 'Vencida' : 'Pendiente';
      const statusClass = isExpired ? 'status-expired' : 'status-pending';
      
      div.innerHTML = `
        <button class="delete-btn" onclick="deletePrediction(${prediction.id})">Eliminar</button>
        <div class="prediction-content">${prediction.content}</div>
        <div class="prediction-date">Fecha objetivo: ${formatDate(prediction.date)}</div>
        <span class="prediction-status ${statusClass}">${statusText}</span>
      `;
      
      return div;
    }
    
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    }
    
    // Funci√≥n global para eliminar predicciones
    window.deletePrediction = function(id) {
      if (confirm('¬øEst√°s seguro de que quieres eliminar esta predicci√≥n?')) {
        const predictions = getPredictions();
        const filteredPredictions = predictions.filter(p => p.id !== id);
        localStorage.setItem('predictions', JSON.stringify(filteredPredictions));
        loadPredictions();
      }
    };
  });
</script> 