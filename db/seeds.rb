# This file should ensure the existence of records required to run the application in every environment (production,
# development, test). The code here should be idempotent so that it can be executed at any point in every environment.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
#
# Example:
#
#   ["Action", "Comedy", "Drama", "Horror"].each do |genre_name|
#     MovieGenre.find_or_create_by!(name: genre_name)
#   end

puts "üå± Iniciando carga de datos de prueba..."

# Limpiar datos existentes (excepto categor√≠as y badges)
puts "üßπ Limpiando datos existentes..."
User.destroy_all
Prediction.destroy_all
Vote.destroy_all
Comment.destroy_all
Follow.destroy_all
Notification.destroy_all
UserBadge.destroy_all

puts "Creating default badges..."
Badge.create_default_badges

# Create default categories
categories = [
  { name: 'Deportes', description: 'Predicciones sobre deportes y competiciones', color: '#FF6B6B', icon: '‚öΩ' },
  { name: 'Pol√≠tica', description: 'Predicciones sobre pol√≠tica y elecciones', color: '#4ECDC4', icon: 'üèõÔ∏è' },
  { name: 'Tecnolog√≠a', description: 'Predicciones sobre tecnolog√≠a e innovaci√≥n', color: '#45B7D1', icon: 'üíª' },
  { name: 'Entretenimiento', description: 'Predicciones sobre pel√≠culas, m√∫sica y celebridades', color: '#96CEB4', icon: 'üé¨' },
  { name: 'Econom√≠a', description: 'Predicciones sobre mercados y econom√≠a', color: '#FFEAA7', icon: 'üí∞' },
  { name: 'Ciencia', description: 'Predicciones sobre descubrimientos cient√≠ficos', color: '#DDA0DD', icon: 'üî¨' },
  { name: 'Clima', description: 'Predicciones sobre clima y fen√≥menos naturales', color: '#87CEEB', icon: 'üå§Ô∏è' },
  { name: 'Otros', description: 'Otras predicciones variadas', color: '#D3D3D3', icon: '‚ùì' }
]

categories.each do |category_attrs|
  Category.find_or_create_by(name: category_attrs[:name]) do |category|
    category.assign_attributes(category_attrs)
  end
end

puts "Categor√≠as creadas exitosamente"

# Crear usuarios de prueba
puts "üë• Creando usuarios de prueba..."
users_data = [
  { username: 'maria_predice', email: 'maria@example.com', password: 'password123', points: 1250, title: 'Profeta' },
  { username: 'carlos_futuro', email: 'carlos@example.com', password: 'password123', points: 890, title: 'Sabio' },
  { username: 'ana_vidente', email: 'ana@example.com', password: 'password123', points: 2100, title: 'Leyenda' },
  { username: 'juan_apuesta', email: 'juan@example.com', password: 'password123', points: 450, title: 'Aprendiz' },
  { username: 'lucia_ciencia', email: 'lucia@example.com', password: 'password123', points: 750, title: 'Vidente' },
  { username: 'pedro_deportes', email: 'pedro@example.com', password: 'password123', points: 1800, title: 'Maestro' },
  { username: 'sofia_tech', email: 'sofia@example.com', password: 'password123', points: 650, title: 'Vidente' },
  { username: 'miguel_economia', email: 'miguel@example.com', password: 'password123', points: 950, title: 'Sabio' }
]

users = []
users_data.each do |user_data|
  user = User.create!(user_data)
  users << user
  puts "  ‚úÖ Usuario creado: #{user.username} (#{user.title})"
end

# Crear predicciones de prueba
puts "üîÆ Creando predicciones de prueba..."
predictions_data = [
  {
    title: "¬øGanar√° Argentina la Copa Am√©rica 2025?",
    question: "¬øArgentina ser√° campeona de la Copa Am√©rica 2025 que se disputar√° en Estados Unidos?",
    category: Category.find_by(name: 'Deportes'),
    resolution_date: Date.new(2025, 7, 15),
    source: "https://copaamerica.com",
    hint: "Argentina es la actual campeona del mundo y tiene un equipo muy fuerte"
  },
  {
    title: "¬øLanzar√° Apple el iPhone 17 en septiembre 2025?",
    question: "¬øApple presentar√° oficialmente el iPhone 17 en su evento de septiembre de 2025?",
    category: Category.find_by(name: 'Tecnolog√≠a'),
    resolution_date: Date.new(2025, 9, 20),
    source: "https://apple.com",
    hint: "Apple tradicionalmente lanza nuevos iPhones en septiembre"
  },
  {
    title: "¬øGanar√° Trump las elecciones presidenciales de EE.UU. 2025?",
    question: "¬øDonald Trump ser√° elegido presidente de Estados Unidos en las elecciones de noviembre de 2025?",
    category: Category.find_by(name: 'Pol√≠tica'),
    resolution_date: Date.new(2025, 11, 5),
    source: "https://fec.gov",
    hint: "Trump es el candidato republicano y Biden el dem√≥crata"
  },
  {
    title: "¬øSuperar√° Bitcoin los $100,000 en 2025?",
    question: "¬øEl precio de Bitcoin alcanzar√° o superar√° los $100,000 USD en alg√∫n momento de 2025?",
    category: Category.find_by(name: 'Econom√≠a'),
    resolution_date: Date.new(2025, 12, 31),
    source: "https://coinmarketcap.com",
    hint: "Bitcoin ha tenido un comportamiento vol√°til en los √∫ltimos a√±os"
  },
  {
    title: "¬øGanar√° Oppenheimer el Oscar a Mejor Pel√≠cula?",
    question: "¬øOppenheimer ganar√° el premio Oscar a Mejor Pel√≠cula en la ceremonia de 2024?",
    category: Category.find_by(name: 'Entretenimiento'),
    resolution_date: Date.new(2024, 3, 10),
    source: "https://oscars.org",
    hint: "Oppenheimer ha sido muy bien recibida por la cr√≠tica",
    resolved: true,
    outcome: true,
    skip_validation: true
  },
  {
    title: "¬øDescubrir√°n vida en Marte en 2025?",
    question: "¬øLos cient√≠ficos anunciar√°n el descubrimiento de vida (pasada o presente) en Marte en 2025?",
    category: Category.find_by(name: 'Ciencia'),
    resolution_date: Date.new(2025, 12, 31),
    source: "https://nasa.gov",
    hint: "Hay varias misiones activas explorando Marte"
  },
  {
    title: "¬øSer√° 2025 el a√±o m√°s caluroso registrado?",
    question: "¬ø2025 ser√° el a√±o m√°s caluroso registrado globalmente seg√∫n datos de la NASA o NOAA?",
    category: Category.find_by(name: 'Clima'),
    resolution_date: Date.new(2025, 12, 31),
    source: "https://climate.nasa.gov",
    hint: "Los √∫ltimos a√±os han batido r√©cords de temperatura"
  },
  {
    title: "¬øLlegar√° el primer humano a Marte en 2025?",
    question: "¬øUna misi√≥n tripulada llegar√° a Marte y aterrizar√° exitosamente en 2025?",
    category: Category.find_by(name: 'Ciencia'),
    resolution_date: Date.new(2025, 12, 31),
    source: "https://spacex.com",
    hint: "SpaceX tiene planes ambiciosos para Marte"
  },
  {
    title: "¬øGanar√° Real Madrid la Champions League 2025?",
    question: "¬øReal Madrid ser√° campe√≥n de la UEFA Champions League en la temporada 2024/25?",
    category: Category.find_by(name: 'Deportes'),
    resolution_date: Date.new(2025, 6, 1),
    source: "https://uefa.com",
    hint: "Real Madrid es uno de los favoritos hist√≥ricos"
  },
  {
    title: "¬øLanzar√° Tesla el Cybertruck en 2025?",
    question: "¬øTesla comenzar√° las entregas masivas del Cybertruck a clientes en 2025?",
    category: Category.find_by(name: 'Tecnolog√≠a'),
    resolution_date: Date.new(2025, 12, 31),
    source: "https://tesla.com",
    hint: "El Cybertruck ha tenido varios retrasos en su lanzamiento"
  }
]

predictions = []
predictions_data.each do |pred_data|
  user = users.sample
  prediction = user.predictions.create!(pred_data)
  predictions << prediction
  puts "  ‚úÖ Predicci√≥n creada: #{prediction.title} (por #{user.username})"
end

# Crear votos de prueba
puts "üó≥Ô∏è Creando votos de prueba..."
predictions.each do |prediction|
  # Cada predicci√≥n tendr√° entre 3-8 votos de diferentes usuarios
  voters = users.sample(rand(3..8))
  voters.each do |voter|
    next if voter == prediction.user # El creador no vota en su propia predicci√≥n
    
    points = rand(1..[10, voter.points].min)
    outcome = [true, false].sample
    
    vote = prediction.votes.create!(
      user: voter,
      points: points,
      outcome: outcome
    )
    
    # Actualizar puntos del usuario
    voter.update!(points: voter.points - points)
  end
  puts "  ‚úÖ #{prediction.votes.count} votos creados para: #{prediction.title}"
end

# Crear comentarios de prueba
puts "üí¨ Creando comentarios de prueba..."
comments_data = [
  "¬°Excelente predicci√≥n! Creo que tienes raz√≥n.",
  "No estoy seguro, pero es interesante ver qu√© pasa.",
  "Bas√°ndome en los datos actuales, creo que ser√° as√≠.",
  "Interesante perspectiva. ¬øQu√© te hace pensar eso?",
  "Creo que necesitamos m√°s informaci√≥n para evaluar esto.",
  "¬°Muy buena observaci√≥n! No lo hab√≠a considerado.",
  "Esto podr√≠a cambiar todo el panorama.",
  "Interesante predicci√≥n, pero creo que ser√° diferente.",
  "¬°Totalmente de acuerdo! Los indicadores apuntan a eso.",
  "No estoy convencido, pero respeto tu opini√≥n.",
  "¬°Brillante an√°lisis! Creo que acertar√°s.",
  "Esto va a ser muy interesante de seguir.",
  "Creo que hay factores que no se est√°n considerando.",
  "¬°Excelente punto de vista! Me has convencido.",
  "Esto podr√≠a tener implicaciones importantes."
]

predictions.each do |prediction|
  # Cada predicci√≥n tendr√° entre 2-6 comentarios
  commenters = users.sample(rand(2..6))
  commenters.each do |commenter|
    next if commenter == prediction.user # El creador no comenta en su propia predicci√≥n
    
    comment = prediction.comments.create!(
      user: commenter,
      content: comments_data.sample
    )
  end
  puts "  ‚úÖ #{prediction.comments.count} comentarios creados para: #{prediction.title}"
end

# Crear follows de prueba
puts "üë• Creando relaciones de seguimiento..."
users.each do |follower|
  # Cada usuario seguir√° a 2-4 otros usuarios
  users_to_follow = users.reject { |u| u == follower }.sample(rand(2..4))
  users_to_follow.each do |user_to_follow|
    Follow.create!(
      follower: follower,
      followed: user_to_follow
    )
  end
  puts "  ‚úÖ #{follower.username} sigue a #{users_to_follow.count} usuarios"
end

# Crear algunas notificaciones de prueba
puts "üîî Creando notificaciones de prueba..."
users.each do |user|
  # Cada usuario tendr√° 1-4 notificaciones
  rand(1..4).times do
    notification_types = ['comment', 'follow']
    notification_type = notification_types.sample
    
    case notification_type
    when 'comment'
      # Notificaci√≥n de comentario
      comment = Comment.where.not(user: user).sample
      if comment && comment.prediction.user == user
        Notification.create!(
          user: user,
          title: "Nuevo comentario",
          message: "#{comment.user.username} coment√≥ en tu predicci√≥n: '#{comment.prediction.title}'",
          notification_type: "comment",
          reference_id: comment.id,
          reference_type: "Comment",
          read: [true, false].sample
        )
      end
    when 'follow'
      # Notificaci√≥n de follow
      follower = users.reject { |u| u == user }.sample
      if follower
        Notification.create!(
          user: user,
          title: "Nuevo seguidor",
          message: "#{follower.username} empez√≥ a seguirte",
          notification_type: "follow",
          reference_id: follower.id,
          reference_type: "User",
          read: [true, false].sample
        )
      end
    end
  end
  puts "  ‚úÖ #{user.notifications.count} notificaciones creadas para #{user.username}"
end

# Asignar algunos badges a usuarios
puts "üèÖ Asignando badges a usuarios..."
badges = Badge.all
users.each do |user|
  # Cada usuario tendr√° 1-3 badges aleatorios
  user_badges = badges.sample(rand(1..3))
  user_badges.each do |badge|
    UserBadge.create!(
      user: user,
      badge: badge,
      earned_at: rand(1..30).days.ago
    )
  end
  puts "  ‚úÖ #{user.username} tiene #{user.user_badges.count} badges"
end

# Actualizar estad√≠sticas de usuarios
puts "üìä Actualizando estad√≠sticas de usuarios..."
users.each do |user|
  user.update_stats
  puts "  ‚úÖ Estad√≠sticas actualizadas para #{user.username}"
end

puts ""
puts "üéâ ¬°Datos de prueba cargados exitosamente!"
puts ""
puts "üìà Resumen:"
puts "  üë• #{User.count} usuarios creados"
puts "  üîÆ #{Prediction.count} predicciones creadas"
puts "  üó≥Ô∏è #{Vote.count} votos creados"
puts "  üí¨ #{Comment.count} comentarios creados"
puts "  üë• #{Follow.count} relaciones de seguimiento creadas"
puts "  üîî #{Notification.count} notificaciones creadas"
puts "  üèÖ #{UserBadge.count} badges asignados"
puts ""
puts "üöÄ La aplicaci√≥n est√° lista para usar con datos realistas!"
puts ""
puts "üí° Usuarios de prueba disponibles:"
users.each do |user|
  puts "  üë§ #{user.username} (#{user.email}) - Contrase√±a: password123"
end
